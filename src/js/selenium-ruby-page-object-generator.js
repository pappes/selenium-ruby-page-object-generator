/**
 * Created by Dave on 4/03/2017. (C)  all rights reserved
 */


//  uncomment the below line of code (and two lines at the bottom)
//  to isolate the scope of the logic in a bookmarklet which will reduce naming conflicts
//  put the resulting function through https://jscompress.com/
//javascript:(function(){


//TODO: ability to handle multiple check boxes with the same name but different values
//TODO: set radiobutton group to a specific value
//TODO: get the currently selected value from a radiobutton group
//TODO: ability to handle multiple check boxes with the same name but different values
//TODO: allow a checkbox to be set/unset (currently only has click)
//TODO: ability to handle select (combo box) elements
//TODO: ability to handle tables of data
//TODO: converet page title to PascalCase for ruby object name
//TODO: unit testing using a framework
//TODO: minify with https://jscompress.com/
//TODO: invoke js form an Ezidbeit static site instead of minifying all the logic.

    function createPageObjectHeader(title) {
        //sample output:
        //    class EBSLoginPage < Page
        const GENERATORCOMMENT = '#This ruby pageobject file has been generated by a bookmarklet and should not be edited by hand\n';
        const CONFLUENCEREFERENCE = '#For details about the bookmarklet search confluence for "bookmarklet"\n';
        const METADATAPREFIX = '#It has been generated on ';
        const HEADERPREFIX = '\nclass ';
        const HEADERSUFFIX = ' < Page\n\n';

        var header = '';
        var today = new Date();

        header += GENERATORCOMMENT;
        header += CONFLUENCEREFERENCE;
        header += METADATAPREFIX + today;
        header += HEADERPREFIX + title + HEADERSUFFIX;

        return header;
    }
    function createPageObjectFooter() {
        //sample output:
        //    end
        const FOOTERLINE = '\n\nend\n';

        return FOOTERLINE;
    }
    function removePunctuation(dirtyString) {
        //the following regex strips all punctuation and then turns spaces to underscores as explained at
        //http://stackoverflow.com/questions/4328500/how-can-i-strip-all-punctuation-from-a-string-in-javascript-using-regex
        return dirtyString.replace(/[^\w\s]/g, "").replace(/\s+/g, "_");
    }
    function getInputFieldName(inputField) {
        //most buttons have a user readable id and no value for name
        //most input fields have a user readable name
        //most anchors have neither name nor id and have spaces in their text
        //ruby identifiers won't like spaces
        var inputName = inputField.name || inputField.id || inputField.text;
        return removePunctuation(inputName);
    }
    function createPageObjectAnnotation(inputField) {
        //sample output:
        //    @@login_button = {:platform => "Web", :id_type => :id, :id_value => "login_button" }
        //    @@user_name = {:platform => "Web", :id_type => :name, :id_value => "user_name" }
        const ANNOTATIONPREFIX  = '    @@';
        const ANNOTATIONIDMID   = ' = {:platform => "Web", :id_type => :id, :id_value => "';
        const ANNOTATIONNAMEMID = ' = {:platform => "Web", :id_type => :name, :id_value => "';
        const ANNOTATIONSUFFIX  = '" }\n';
        const ATTRIBUTENAME  = 'name';

        var annotations = '';
        var inputName = getInputFieldName(inputField);

        annotations += ANNOTATIONPREFIX;
        annotations += inputName;
        //most buttons have a user readable id and no value for name
        //most input fields have a user readable name
        annotations += inputField.hasAttribute(ATTRIBUTENAME) ? ANNOTATIONNAMEMID : ANNOTATIONIDMID;
        annotations += inputName;
        annotations += ANNOTATIONSUFFIX;
        return annotations;
    }
    function createPageObjectMethod(inputField) {
        const INPUTTYPEBUTTON  = 'button';
        const INPUTTYPERADIOBUTTON  = 'radio';
        const INPUTTYPECHECKBOX  = 'checkbox';
        const TAGNAMEANCHOR  = 'A';
        const METHODPREFIX     = '\n    def self.';
        const METHODSUFFIX     = '\n    end\n';
        //sample input types are : button, checkbox, color, date, email, number, radio, submit, time, etc

        var method = METHODPREFIX;
        var inputName = getInputFieldName(inputField);

        if (inputName !== null) {
            var method = METHODPREFIX;
            if (inputField.tagName === TAGNAMEANCHOR ||
                inputField.type === INPUTTYPECHECKBOX ||
                inputField.type === INPUTTYPERADIOBUTTON ||
                inputField.type === INPUTTYPEBUTTON
                ){
                method += createPageObjectClickMethod(inputName);
            } else {
                method += createPageObjectEnterMethod(inputName);
            }
            method += METHODSUFFIX;
        }
        return method;
    }
    function createPageObjectClickMethod(buttonName) {
        //sample button method:
        //    def self.login_button
        //    click @@login_button
        //    end
        const CLICKMETHODMID    = '\n    click @@';

        return buttonName + CLICKMETHODMID + buttonName;
    }
    function createPageObjectEnterMethod(fieldName) {
        //sample text field method:
        //    def self.user_name=user_name_value
        //    enter @@user_name,user_name_value
        //    end
        const ENTERMETHODMID1   = '=';
        const ENTERMETHODMID2   = '\n    enter @@';
        const ENTERMETHODMID3   = ',';
        const VALUESUFFIX       = '_value';

        return fieldName + ENTERMETHODMID1 + fieldName + VALUESUFFIX + ENTERMETHODMID2 +fieldName + ENTERMETHODMID3 + fieldName + VALUESUFFIX;
    }
    function createPageObject(parentNode, pageObjectName) {
        // Get the list of user input fields from the current HTML page and build a Ruby page object file
        const INTERACTIVEELEMENTS   = 'a,button,input,select,textarea';
        var rubyPageObject ='';
        var inputFields = parentNode.querySelectorAll(INTERACTIVEELEMENTS);
        var i = 0;

        rubyPageObject += createPageObjectHeader(pageObjectName);
        for (i = 0; i < inputFields.length; ++i) {
            rubyPageObject += createPageObjectAnnotation(inputFields[i]);
        }
        for (i = 0; i < inputFields.length; ++i) {
            rubyPageObject += createPageObjectMethod(inputFields[i]);
        }
        rubyPageObject += createPageObjectFooter();
        return rubyPageObject;
    }
    function giveFileToUser(fileName, fileContents) {
        const ANCHORTAG                  = 'a';
        const ANCHORTARGETATTRIBUTE      = 'href';
        const ANCHORDESTINATIONATTRIBUTE = 'download';
        const PLAINTEXTENCODING          = 'data:text/plain;charset=utf-8,';
        const ELEMENTDISPLAYHIDDEN       = 'none';

        var element = document.createElement(ANCHORTAG);

        element.setAttribute(ANCHORTARGETATTRIBUTE, PLAINTEXTENCODING + encodeURIComponent(fileContents));
        element.setAttribute(ANCHORDESTINATIONATTRIBUTE, fileName);
        element.style.display = ELEMENTDISPLAYHIDDEN;
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
    }
    function constructPageObject(webPage) {

        const RUBYFILEEXTENSION = '.rb';
        var filename = removePunctuation(webPage.title)
        giveFileToUser(filename + RUBYFILEEXTENSION, createPageObject(webPage, filename));
    }

//  uncomment the below 2 lines to execute the logic immediately for the current page as a bookmarklet
//constructPageObject(document);
//})();

